# This is the main config file for default parameters for all hyperparameter and task parameter.
# Every config file should import this. The project will run with these parameters, no matter what.

name: "SLURM"   # MUST BE "SLURM"

# Required
partition: "gpu"
job-name: "lts_gns_prodmp"    # this will be the experiments name in slurm

# Required - Cluster Specific
num_parallel_jobs: 99
ntasks: 1
cpus-per-task: 2
mem-per-cpu: 15000
time: 2880  # in minutes

sbatch_args: # Dictionary of SBATCH keywords and arguments
  gres: "gpu:1"


slurm_log: "./output/slurmlog" # optional. dir in which slurm output and error logs will be saved.
---

name: "evaluation_exp"
path: "./output/cw2_data"
repetitions: 1 # number of times one set of parameters is run
reps_per_job: 1 # number of repetitions in each job. useful for paralellization. defaults to 1.
reps_in_parallel: 1 # number of repetitions in each job that are executed in parallel. defaults to 1.

params:
  evaluation:
    experiment_name: "e2_mgn_prodmp_deformable_plate"  # name of the experiment. will be used as folder name in output folder
    eval_name: "last_step_eval"            # subfolder for saving exps
    root_path: "output/scraped_checkpoints"   # location to save reports in
    iteration: null
    verbosity: 1

  algorithm:
    common:
      evaluation:
        large:
          frequency: 20   # after how many small evals there is a large one
          multi_step_evaluations: [ 49 ]
          animation_task_indices: []   # which tasks to plot.
          mse_ggns_style: False
    lts_gns_prodmp:
      evaluation:
        large:
          num_z_samples_per_animation_task: 1 # how many different animations with different z samples should be computed

  env:
    common:  # common parameters that are used by all environments/tasks
      preprocess:
        start_index: 0

      visualization:
        num_frames: 100  # maximum number of frames to visualize. -1 for "all"
        fps: 5
        matplotlib:
          show_legend: False
          fig_size: 12
          dpi: 100
        plotly:
          button_name: "Yoinks"

    deformable_plate:
      visualization:
        backend: matplotlib  # either matplotlib or plotly. Some tasks only support one or the other
        limits:
          xlim: [ -1.25, 1.75 ]
          ylim: [ -1.25, 1.75 ]
          zlim: [ -1.25, 1.75 ]
      postprocess:
        batch:
          max_eval_batch_size: 20
      debug:
        max_tasks_per_split: null

